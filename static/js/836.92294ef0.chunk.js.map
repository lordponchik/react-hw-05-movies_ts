{"version":3,"file":"static/js/836.92294ef0.chunk.js","mappings":"6IACA,SAAgB,QAAU,oCAAoC,YAAc,yC,aCC7D,SAASA,IACtB,OAAOC,EAAAA,EAAAA,KAAA,KAAGC,UAAWC,EAAEC,QAAQC,SAAC,6DAClC,C,sECJA,MAAMC,EAAU,CACdC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cACE,gQAINC,eAAeC,EAAeC,GAC5B,MAAMC,QAAgBC,MAAM,gCAAgCF,IAASP,GAGrE,aAFsBQ,EAAQE,MAGhC,CAEOL,eAAeM,IACpB,aAAaL,EAAe,oCAC9B,CAEOD,eAAeO,EAAYC,GAChC,aAAaP,EAAe,sBAAsBO,8CACpD,CAEOR,eAAeS,EAAmBC,GACvC,aAAaT,EAAe,SAASS,mBACvC,CAEOV,eAAeW,EAAmBD,GACvC,aAAaT,EAAe,SAASS,2BACvC,CAEOV,eAAeY,EAAmBF,GACvC,aAAaT,EAAe,SAASS,kCACvC,C,oECjCA,SAAgB,KAAO,uBAAuB,SAAW,2BAA2B,WAAa,6BAA6B,KAAO,wB,uCCcrI,MAAMG,EACJ,yKAQa,SAASC,IACtB,MAAM,QAAEC,IAAYC,EAAAA,EAAAA,MACd,KAAEC,EAAI,UAAEC,EAAS,QAAEC,IAAYC,EAAAA,EAAAA,GAAkB,CACrDC,SAAU,CAAC,YAAaN,GACxBO,QAASA,IAVbtB,eAAgCe,GAC9B,MAAM,KAAEQ,SAAeZ,EAAAA,EAAAA,IAAmBI,GAE1C,OAAOQ,CACT,CAMmBC,CAAiBC,OAAOV,IACvCW,sBAAsB,IAGxB,OACEC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAlC,SAAA,CACGwB,IAAa5B,EAAAA,EAAAA,KAACuC,EAAAA,EAAM,IACpBV,IAAW7B,EAAAA,EAAAA,KAACD,EAAAA,EAAkB,IAC9B4B,GAAwB,IAAhBA,EAAKa,QACZxC,EAAAA,EAAAA,KAAA,MAAIC,UAAWC,EAAE+B,KAAK7B,SACnBuB,EAAKc,KAAIC,IAAiD,IAAhD,QAAEC,EAAO,UAAEC,EAAS,KAAEC,EAAI,aAAEC,GAAcJ,EACnD,OACEL,EAAAA,EAAAA,MAAA,MAAkBpC,UAAWC,EAAE6C,SAAS3C,SAAA,EACtCJ,EAAAA,EAAAA,KAAA,OACEgD,IAAKF,EAAe,kCAAkCA,IAAiBvB,EACvE0B,IAAKJ,EACLK,MAAO,IACPjD,UAAWC,EAAEiD,cAEfd,EAAAA,EAAAA,MAAA,OAAAjC,SAAA,EACEJ,EAAAA,EAAAA,KAAA,MAAIC,UAAWC,EAAE2C,KAAKzC,SAAEyC,KACxB7C,EAAAA,EAAAA,KAAA,KAAAI,SAAIwC,SATCD,EAWJ,OAKX3C,EAAAA,EAAAA,KAACD,EAAAA,EAAkB,MAI3B,C","sources":["webpack://react-hw-05-movies_ts/./src/components/InformationMessage/InformationMessage.module.css?b207","components/InformationMessage/InformationMessage.tsx","services/api.ts","webpack://react-hw-05-movies_ts/./src/views/CastView/CastView.module.css?64bb","views/CastView/CastView.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"message\":\"InformationMessage_message__2XMt6\",\"animMessage\":\"InformationMessage_animMessage__Zgqpm\"};","import s from './InformationMessage.module.css';\r\n\r\nexport default function InformationMessage() {\r\n  return <p className={s.message}>Unfortunately the requested information is not available.</p>;\r\n}\r\n","const options = {\r\n  method: 'GET',\r\n  headers: {\r\n    accept: 'application/json',\r\n    Authorization:\r\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIxNzJjNjgwZTU1OGJkMmM2YjkwMmM4MGIyZDVlMDc3ZCIsIm5iZiI6MTczMDQ3NDM2NC43MzMxNzE1LCJzdWIiOiI2NDgxY2M5Y2UyNzI2MDAwZThiZjRlYjQiLCJzY29wZXMiOlsiYXBpX3JlYWQiXSwidmVyc2lvbiI6MX0.5dCuWIPkc-FoQqtFcC5mms7ke4vYd9VzbOaT7ZD_h1c',\r\n  },\r\n};\r\n\r\nasync function fetchMoviesAPI(route: string) {\r\n  const request = await fetch(`https://api.themoviedb.org/3/${route}`, options);\r\n  const results = await request.json();\r\n\r\n  return results;\r\n}\r\n\r\nexport async function fetchTrendingMovies() {\r\n  return await fetchMoviesAPI('trending/movie/day?language=en-US');\r\n}\r\n\r\nexport async function fetchMovies(q: string) {\r\n  return await fetchMoviesAPI(`search/movie?query=${q}&include_adult=false&language=en-US&page=1`);\r\n}\r\n\r\nexport async function fetchMoviesDetails(id: number) {\r\n  return await fetchMoviesAPI(`movie/${id}?language=en-US`);\r\n}\r\n\r\nexport async function fetchMoviesCredits(id: number) {\r\n  return await fetchMoviesAPI(`movie/${id}/credits?language=en-US`);\r\n}\r\n\r\nexport async function fetchMoviesReviews(id: number) {\r\n  return await fetchMoviesAPI(`movie/${id}/reviews?language=en-US&page=1`);\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"cast\":\"CastView_cast__FjmnN\",\"castItem\":\"CastView_castItem__FYx54\",\"profileImg\":\"CastView_profileImg__kYaH8\",\"name\":\"CastView_name__N4RI7\"};","import { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { fetchMoviesCredits } from '../../services/api';\r\nimport s from './CastView.module.css';\r\nimport InformationMessage from '../../components/InformationMessage/InformationMessage';\r\nimport Loader from '../../components/Loader/Loader';\r\nimport { useQuery } from '@tanstack/react-query';\r\n\r\ninterface ICast {\r\n  cast_id: number;\r\n  name: string;\r\n  character: string;\r\n  profile_path: string;\r\n}\r\n\r\nconst img_url =\r\n  'https://images.unsplash.com/photo-1601027847350-0285867c31f7?q=80&w=2574&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D';\r\n\r\nasync function requestMovieCast(movieId: number) {\r\n  const { cast } = await fetchMoviesCredits(movieId);\r\n\r\n  return cast;\r\n}\r\n\r\nexport default function CastView() {\r\n  const { movieId } = useParams();\r\n  const { data, isPending, isError } = useQuery<ICast[]>({\r\n    queryKey: ['movieCast', movieId],\r\n    queryFn: () => requestMovieCast(Number(movieId)),\r\n    refetchOnWindowFocus: false,\r\n  });\r\n\r\n  return (\r\n    <>\r\n      {isPending && <Loader />}\r\n      {isError && <InformationMessage />}\r\n      {data && data.length !== 0 ? (\r\n        <ul className={s.cast}>\r\n          {data.map(({ cast_id, character, name, profile_path }) => {\r\n            return (\r\n              <li key={cast_id} className={s.castItem}>\r\n                <img\r\n                  src={profile_path ? `https://image.tmdb.org/t/p/w300${profile_path}` : img_url}\r\n                  alt={name}\r\n                  width={100}\r\n                  className={s.profileImg}\r\n                />\r\n                <div>\r\n                  <h3 className={s.name}>{name}</h3>\r\n                  <p>{character}</p>\r\n                </div>\r\n              </li>\r\n            );\r\n          })}\r\n        </ul>\r\n      ) : (\r\n        <InformationMessage />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n"],"names":["InformationMessage","_jsx","className","s","message","children","options","method","headers","accept","Authorization","async","fetchMoviesAPI","route","request","fetch","json","fetchTrendingMovies","fetchMovies","q","fetchMoviesDetails","id","fetchMoviesCredits","fetchMoviesReviews","img_url","CastView","movieId","useParams","data","isPending","isError","useQuery","queryKey","queryFn","cast","requestMovieCast","Number","refetchOnWindowFocus","_jsxs","_Fragment","Loader","length","map","_ref","cast_id","character","name","profile_path","castItem","src","alt","width","profileImg"],"sourceRoot":""}